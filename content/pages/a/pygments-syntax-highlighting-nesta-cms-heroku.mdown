Title: Deploying a Nesta CMS Blog with Pygments Syntax Highlighting to Heroku
Flags: draft

As seems to be tradition amongst the Nerderati it's common to explain the particulars of your blogging setup anytime there's a change. Today is such an occasion. After a significant hiatus of any meaningful writing I've decided it's time to get back on the saddle.

<p class="note">
If you're not much for foreplay a fully deployable version of this site can be found at <a href="http://github.com/rwdaigle">http://github.com/rwdaigle</a>.
</p>

## Requirements

Having wrestled with quite a few blogging engines in the past I had several requirements of a new setup. Firstly it had to support a workflow that lets me write on my local machine using the tools I prefer, namely [markdown formatted articles](http://daringfireball.net/projects/markdown/) composed with [IA Writer](http://www.iawriter.com/) or a basic text editor.

Second, it had to support a git-based workflow. My content is going to live in git and there's no reason the publishing platform shouldn't build on top of that as well. This also plays well with [Heroku](http://heroku.com) deployments.

Static site generators are all the rage and fulfill the first two requirements. However, I've found them to be rather rigid and obtrusive for the very incremental edit-view-edit workflow I assume when writing. My last requirement was that I could write and immediately refresh my browser to see the fully rendered site running locally. Waiting for the whole site to generate on every minor edit proved to be far too slow for me in the past.

Fortunately, there's a better way.

## Choices

The list of dynamic file-backed Heroku-friendly blog engines isn't particularly long. I investigated both [Toto](http://cloudhead.io/toto) and [Nesta CMS](http://nestacms.com/) and, after a brief wrestle trying to get Toto's HTTP request headers to play nice with rack-cache, settled on Nesta. Nesta is under active development and is written with Sinatra, the very simple and hackable web framework for Ruby.

For deployment [Heroku](http://heroku.com) is the obvious choice given its seamless git-based workflow and variety of [add-ons](http://addons.heroku.com). I also work there.

## Overview

Deploying a Nesta backed blog to Heroku is quite simple. However, you don't just want a stock setup. You have to take into account proper asset caching for performance, slick syntax highlighting, an aesthetically pleasing theme, app instrumentation, feed redirection and production deployment. I've gone ahead and boiled down all these concerns into just a few steps.

<p class="note">
These steps assume you have <a href="http://git-scm.com/">git</a> and <a href="http://www.ruby-lang.org/en/">ruby</a> available from the command line and have already signed up for a <a href="https://api.heroku.com/signup">Heroku account</a>. The <a href="http://toolbelt.heroku.com/">Heroku Toolbelt</a> can get you up and running if you're missing any components.
</p>

## Clone Nesta CMS starter app

Though the [Nesta quick-start](http://nestacms.com/docs/quick-start) is solid, as are all their docs, we can skip ahead by using an app template. I've created one [on github](https://github.com/rwdaigle/nesta-app-template) that's already setup for syntax highlighting with [Pygments](http://pygments.org/), the ["clean" theme](https://github.com/rwdaigle/nesta-theme-clean) you see running this site and the minimal artifacts needed to quickly deploy and provision a full-featured Heroku app.

Clone the app template to your local environment using `git`. Use the domain name of your site instead of `mysite.com`

<pre lang='bash'><code>
$ heroku create -s cedar --addons memcache,newrelic
Creating electric-flower-4751... done, stack is cedar
Adding memcache to electric-flower-4751... done
Adding newrelic to electric-flower-4751... done
http://electric-flower-4751.herokuapp.com/ | git@heroku.com:electric-flower-4751.git
Git remote heroku added

$ git push heroku master
...
-----> Heroku receiving push
-----> Git submodules detected, installing
       Submodule 'themes/clean' (git@github.com:rwdaigle/nesta-theme-clean.git) registered for path 'themes/clean'
       ...
-----> Launching... done, v5
-----> Deploy hooks scheduled, check output in your logs
       http://electric-flower-4751.herokuapp.com deployed to Heroku

To git@heroku.com:electric-flower-4751.git
 * [new branch]      master -> master

$ cat .env | tr '\n' ' ' | xargs heroku config:add 
Adding config vars and restarting app... done, v6
  NESTA_AUTHOR__EMAIL                     => your.email@gmail.com
  ...
  NESTA_THEME                             => clean
  NESTA_TITLE                             => My Name

$ heroku open
Opening http://electric-flower-4751.herokuapp.com/
```
</code></pre>

Install the required Ruby dependencies using [Bundler](http://gembundler.com/).

<pre lang='bash'><code>
$ bundle install
</code></pre>

That's all it takes to get the app installed locally. Start the app with:

<pre lang='bash'><code>
$ foreman start
</code></pre>

and view it in your browser at [http://localhost:5000](http://localhost:5000).

## Provision Heroku app

## Deploy

## Write

## Options

cache timeout
heroku addons
nesta themes
pygments CSS