Title: Deploying a Nesta CMS Blog with Pygments Syntax Highlighting to Heroku
Date: December 31, 2012
Flags: draft

As seems to be tradition amongst the Nerderati it's common to explain the particulars of your blogging setup anytime there's a change. Today is such an occasion. After a significant hiatus of any meaningful writing I've decided it's time to get back on the saddle.

<p class="note">
If you're not much for foreplay a fully deployable version of this site can be found at <a href="http://github.com/rwdaigle">http://github.com/rwdaigle</a>.
</p>

## Requirements

Having wrestled with quite a few blogging engines in the past I had several requirements of a new setup. Firstly it had to support a workflow that lets me write on my local machine using the tools I prefer, namely [markdown formatted articles](http://daringfireball.net/projects/markdown/) composed with [IA Writer](http://www.iawriter.com/) or a basic text editor.

Second, it had to support a git-based workflow. My content is going to live in git and there's no reason the publishing platform shouldn't build on top of that as well. This also plays well with [Heroku](http://heroku.com) deployments.

Static site generators are all the rage and fulfill the first two requirements. However, I've found them to be rather rigid and obtrusive for the very incremental edit-view-edit workflow I assume when writing. My last requirement was that I could write and immediately refresh my browser to see the fully rendered site running locally. Waiting for the whole site to generate on every minor edit proved to be far too slow for me in the past.

Fortunately, there's a better way.

## Choices

The list of dynamic file-backed Heroku-friendly blog engines isn't particularly long. I investigated both [Toto](http://cloudhead.io/toto) and [Nesta CMS](http://nestacms.com/) and, after a brief wrestle trying to get Toto's HTTP request headers to play nice with rack-cache, settled on Nesta. Nesta is under active development and is written with Sinatra, the very simple and hackable web framework for Ruby.

For deployment [Heroku](http://heroku.com) is the obvious choice given its seamless git-based workflow and variety of [add-ons](http://addons.heroku.com). I also work there.

## Overview

Deploying a Nesta backed blog to Heroku is quite simple. However, you don't just want a stock setup. You have to take into account proper asset caching for performance, slick syntax highlighting, an aesthetically pleasing theme, app instrumentation, feed redirection and production deployment. I've gone ahead and boiled down all these concerns into just a few steps.

<p class="note">
These steps assume you have <a href="http://git-scm.com/">git</a> and <a href="http://www.ruby-lang.org/en/">ruby</a> available from the command line and have already signed up for a <a href="https://api.heroku.com/signup">Heroku account</a>. The <a href="http://toolbelt.heroku.com/">Heroku Toolbelt</a> can get you up and running if you're missing any components.
</p>

## Clone starter app

Though the [Nesta quick-start](http://nestacms.com/docs/quick-start) is solid, as are all their docs, we can skip ahead by using an app template. I've created one [on github](https://github.com/rwdaigle/nesta-app-template) that's already setup for syntax highlighting with [Pygments](http://pygments.org/), the ["clean" theme](https://github.com/rwdaigle/nesta-theme-clean) you see running this site and the minimal artefacts needed to quickly deploy and provision a full-featured Heroku app.

Fork the starter template using the "Fork" button on the [template GitHub page](https://github.com/rwdaigle/nesta-app-template).

![Fork starter template screenshot](http://f.cl.ly/items/1m1d0P0e362W0L0G1s12/fork.png)

This will fork it to your GitHub account. From there you can clone your fork locally. Find the repository URL for your fork and copy it (your URL will differ from the one shown below).

![Repository URL screenshot](http://f.cl.ly/items/163a0t1n3w0D282v3v25/repo-url.png)

Clone the app template to your local environment using `git`. Use the domain name of your site instead of `mysite.com`

<pre lang='bash'><code>
$ git clone git@github.com:rwdaigle/nesta-app-template.git mysite.com
Cloning into mysite.com...
remote: Counting objects: 72, done.
remote: Compressing objects: 100% (38/38), done.
remote: Total 72 (delta 29), reused 63 (delta 20)
Receiving objects: 100% (72/72), 11.69 KiB, done.
Resolving deltas: 100% (29/29), done.
</code></pre>

The application's source is now installed locally in the `mysite.com` directory.

## Run Nesta

Now that the site template is present in the local environment you can install required dependencies and render the site locally before deploying to a remote server environment. A `bootstrap.sh` script is provided for your convenience.

<div class="note">
The <code>bootstrap.sh</code> script does not use sudo or make any destructive commands. However, please review the script source before executing.
</div>

<pre lang='bash'><code>
$ cat bootstrap.sh
# ... script source

$ ./bootstrap.sh 
Using RedCloth (4.2.9) 
Using addressable (2.2.7) 
# ...
Submodule path 'themes/clean': checked out '889e094749008d2bf4ecf901555fce44c7f7bc87'
</code></pre>

Once bootstrap has finished start the app using the `foreman` utility.

<pre lang='bash'><code>
$ foreman start
14:25:47 web.1     | started with pid 59647
</code></pre>

Opening [http://localhost:5000](http://localhost:5000) should display the site running with a single getting started article listed on the home page. Any errors that occur will be shown in the terminal where you entered the `foreman start` command.

## Deploy to Heroku

Assuming you have a Heroku account and have successfully installed the [Heroku Toolbelt](http://toolbelt.heroku.com) you can use the provided helper script to quickly deploy the site install any dependencies and setup the appropriate configuration.

<div class="note">
The app deployed to Heroku will not incur any charges on Heroku. The <code>deploy.sh</code> script does not use sudo or make any destructive commands. However, please review the script source before executing.
</div>

<pre lang='bash'><code>
$ cat deploy.sh
# ...script source

$ ./deploy.sh 
Creating vivid-sword-9170... done, stack is cedar
Adding memcache to vivid-sword-9170... done
# ...
Opening http://vivid-sword-9170.herokuapp.com/
</code></pre>

## Next steps

Point to welcome post...

## Options

cache timeout
heroku addons
nesta themes
pygments CSS